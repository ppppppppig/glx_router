// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hello.proto

#include "hello.pb.h"
#include "hello.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace hello {

static const char* HelloService_method_names[] = {
  "/hello.HelloService/hello",
};

std::unique_ptr< HelloService::Stub> HelloService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HelloService::Stub> stub(new HelloService::Stub(channel));
  return stub;
}

HelloService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_hello_(HelloService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::hello::HelloMsg, ::hello::HelloMsg>* HelloService::Stub::helloRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::hello::HelloMsg, ::hello::HelloMsg>::Create(channel_.get(), rpcmethod_hello_, context);
}

::grpc::ClientAsyncReaderWriter< ::hello::HelloMsg, ::hello::HelloMsg>* HelloService::Stub::AsynchelloRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::hello::HelloMsg, ::hello::HelloMsg>::Create(channel_.get(), cq, rpcmethod_hello_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::hello::HelloMsg, ::hello::HelloMsg>* HelloService::Stub::PrepareAsynchelloRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::hello::HelloMsg, ::hello::HelloMsg>::Create(channel_.get(), cq, rpcmethod_hello_, context, false, nullptr);
}

HelloService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HelloService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< HelloService::Service, ::hello::HelloMsg, ::hello::HelloMsg>(
          std::mem_fn(&HelloService::Service::hello), this)));
}

HelloService::Service::~Service() {
}

::grpc::Status HelloService::Service::hello(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::hello::HelloMsg, ::hello::HelloMsg>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hello

